<launch>
    <arg name="sim_time_required" default="false"/>
    <param name="use_sim_time" value="$(arg sim_time_required)"/>

    <!-- robot arguments -->
    <arg name="robot_name" default="spot"/>
    <arg name="robot_id" default="0"/>
    <arg name="map_frame" default="vision"/>
    <arg name="odom_frame" default="vision"/>
    <arg name="robot_frame" default="body"/>
    <!-- input 1 arguments -->
    <arg name="input1_name" default="frontright"/>
    <arg name="sensor1_frame" default="$(arg input1_name)"/>
    <arg name="input1/rgb_topic" default="/spot/$(arg input1_name)/color/image_raw"/>
    <arg name="input1/rgb_info_topic" default="/spot/$(arg input1_name)/color/camera_info"/>
    <arg name="input1/depth_topic" default="/spot/$(arg input1_name)/depth/image_rect"/>
    <arg name="input1/label_topic" default="/spot/$(arg input1_name)/seg_cam/image_raw"/>
    <!-- input 2 arguments -->
    <arg name="input2_name" default="frontleft"/>
    <arg name="sensor2_frame" default="$(arg input2_name)"/>
    <arg name="input2/rgb_topic" default="/spot/$(arg input2_name)/color/image_raw"/>
    <arg name="input2/rgb_info_topic" default="/spot/$(arg input2_name)/color/camera_info"/>
    <arg name="input2/depth_topic" default="/spot/$(arg input2_name)/depth/image_rect"/>
    <arg name="input2/label_topic" default="/spot/$(arg input2_name)/seg_cam/image_raw"/>
    <!-- pipeline arguments -->
    <arg name="run_openset_places" default="false"/>
    <arg name="closed_set" default="true"/>
    <arg name="label_type" default="csv" if="$(arg closed_set)"/>
    <arg name="label_type" default="''" unless="$(arg closed_set)"/>
    <arg name="object_label_file" default="$(find khronos_ros)/config/semantic_labels/spot_groundedsam.csv"/>
    <arg name="object_detection_type" default="$(eval 'connected_semantics' if arg('closed_set') else 'instance_forwarding')"/>
    <arg name="subscriber_type" default="$(eval 'semantic' if arg('closed_set') else 'openset')"/>
    <arg name="places_clustering_type" default="PassthroughClustering" if="$(arg run_openset_places)"/>
    <arg name="places_clustering_type" default="NoClustering" unless="$(arg run_openset_places)"/>
    <arg name="log_path" default="$(find hydra)/output/spot"/>
    <arg name="include_static_tfs" default="$(arg sim_time_required)"/>
    <!-- parameter files -->
    <arg name="semantic_map_path" default="''"/>
    <!-- sensor configuration -->
    <arg name="sensor_min_range" default="0.1" doc="minimum sensor range in meters"/>
    <arg name="sensor_max_range" default="5.0" doc="maximum sensor range in meters"/>
    <arg name="temporal_window_size_s" default="3.0" doc="size of active window in seconds"/>
    <!-- LCD pipeline configuration -->
    <arg name="enable_graph_lcd" default="false"/>
    <arg name="enable_visual_lcd" default="false"/>
    <arg name="enable_lcd" value="$(eval arg('enable_graph_lcd') or arg('enable_visual_lcd'))"/>
    <arg name="use_gnn_descriptors" default="false"/>
    <arg name="visual_lcd_config_path" if="$(arg enable_visual_lcd)"/>
    <arg name="graph_lcd_config_path" if="$(arg enable_graph_lcd)"/>
    <arg name="vocabulary_path" default="$(find hydra)/models/vocabulary/ORBvoc.yml"/>
    <!-- misc visualization -->
    <arg name="start_visualizer" default="true"/>
    <arg name="start_rviz" default="true" doc="automatically start rviz"/>
    <arg name="visualizer_ns" default="hydra_dsg_visualizer" doc="visualizer namespace to use"/>
    <arg name="rviz_path" default="$(find hydra_llm_ros)/rviz/spot_multi.rviz"/>
    <arg name="viz_config_path" default="$(find hydra_llm_ros)/config/visualizer_config.yaml"/>
    <!-- log message controls -->
    <arg name="min_glog_level" default="0"/>
    <arg name="verbosity" default="0"/>
    <!-- development args -->
    <arg name="debug" default="false"/>
    <arg name="launch_prefix" value="gdb -ex run --args" if="$(arg debug)"/>
    <arg name="launch_prefix" value="" unless="$(arg debug)"/>

    <include file="$(find hydra_llm_ros)/launch/spot_static_tfs.xml" if="$(arg include_static_tfs)"/>

    <!-- use clip-object detect -->
    <include file="$(find llm)/launch/spot_object_detect.launch" unless="$(arg closed_set)">
        <arg name="camera_name" value="frontright"/>
    </include>
    <include file="$(find llm)/launch/spot_object_detect.launch" unless="$(arg closed_set)">
        <arg name="camera_name" value="frontleft"/>
    </include>

    <include file="$(find grounded_sam_ros)/launch/spot_segmentation.launch" pass_all_args="true" if="$(arg closed_set)" />

    <node pkg="hydra_llm_ros"
          type="hydra_llm_node"
          name="hydra_llm_node"
          launch-prefix="$(arg launch_prefix)"
          args="--minloglevel=$(arg min_glog_level) -v=$(arg verbosity)"
          required="true"
          output="screen">
        <env name="TERM" value="xterm-256color"/>
        <!-- sensor 1 topic remappings -->
        <remap from="~input1/color/image_raw" to="$(arg input1/rgb_topic)"/>
        <remap from="~input1/color/image_raw/compressed" to="$(arg input1/rgb_topic)/compressed"/>
        <remap from="~input1/color/camera_info" to="$(arg input1/rgb_info_topic)"/>
        <remap from="~input1/depth/image_rect" to="$(arg input1/depth_topic)"/>
        <remap from="~input1/semantic/image_raw" to="$(arg input1/label_topic)"/>
        <!-- sensor 2 topic remappings -->
        <remap from="~input2/color/image_raw" to="$(arg input2/rgb_topic)"/>
        <remap from="~input2/color/image_raw/compressed" to="$(arg input2/rgb_topic)/compressed"/>
        <remap from="~input2/color/camera_info" to="$(arg input2/rgb_info_topic)"/>
        <remap from="~input2/depth/image_rect" to="$(arg input2/depth_topic)"/>
        <remap from="~input2/semantic/image_raw" to="$(arg input2/label_topic)"/>
        <!-- parameter files -->
        <rosparam file="$(find hydra_llm_ros)/config/spot_multi.yaml" subst_value="true"/>
        <rosparam file="$(arg graph_lcd_config_path)" ns="loop_closure" if="$(arg enable_graph_lcd)" subst_value="true"/>
        <rosparam file="$(arg visual_lcd_config_path)" ns="loop_closure" if="$(arg enable_visual_lcd)" subst_value="true"/>
    </node>


    <include file="$(find llm)/launch/clip_publisher.launch" pass_all_args="true"
             if="$(arg run_openset_places)">
        <arg name="clip_topic" default="hydra_llm_node/input/clip_vector"/>
    </include>

    <group if="$(arg start_visualizer)">
        <node name="rviz" pkg="rviz" type="rviz" output="log" args="-d $(arg rviz_path)"
              if="$(arg start_rviz)"/>

        <node pkg="hydra_llm_ros" type="hydra_llm_visualizer_node" name="$(arg visualizer_ns)"
              output="screen"
              required="true"
              args="-alsologtostderr -colorlogtostderr -v=$(arg verbosity)">
          <param name="~visualizer_frame" value="$(arg map_frame)"/>
          <remap from="~dsg" to="hydra_llm_node/backend/dsg"/>
          <remap from="~dsg_mesh_updates" to="hydra_llm_node/backend/dsg_mesh"/>
          <rosparam command="load" file="$(arg viz_config_path)" subst_value="true"/>
          <remap from="~llm_places/current_task" to="/current_task"/>
          <param name="load_graph" value="false"/>
          <param name="use_zmq" value="false"/>
        </node>
    </group>

</launch>
